Redis
	- seats { 1: true/false, 2: , 3:, 4: , 5: }

Server 
	- running at a port (9000)

Client 
	- runs at a random port between 7000-8000, can be passed as input
	- shows the seats

	- if a seat is booked/unbooked
		- broadcast the new available seats

---------------

Namespace on server side

var nsp = io.of('/my-namespace');



io.on('connection', function(socket){
  socket.join('some room');
});


io.to('some room').emit('some event');


--------

CLIENT

var io = require('socket.io-client');

var socket = io.connect('http://localhost:7000');

console.log('CLIENT socket', socket.id);

socket.on('connect', function () {
	socket.emit('room', { name: 'ddlj'});
});

socket.on('message', function (data) {
	console.log('message on client data:', data);
});


SERVER

var io = require('socket.io')(7000);

// let count = 1;
io.on('connection', function (socket) {
	console.log('connection established SERVER');

	// count = count + 1;
	// console.log('server socket', socket.id);

	socket.emit('message', { a:1, b:2 });

	socket.on('message', function (data) { 
		console.log('message on server, data:', data);
	});

	socket.on('room', function(roomDetails) {
		socket.join(roomDetails.name);
		io.in('ddlj').emit('message', 'we are in ddls room');
	})

	io.in('ddlj').emit('message', 'we are in ddls room');

	socket.on('disconnect', function () { 
		console.log('socket discconnected on server: ', socket.id);
	});
});

------

Client
	- movies/list
		- ddlj, k3g

	- movies/select
		- ON connect 
			- EMIT socket.emit('join-room')

		- ON get-seat
			- render A,B

		- ON js.hover
			- EMIT hover-seat

		- ON hover-seat
			- render H

		- ON js.set-seat
			- EMIT set-seat

		- ON set-seat
			- render B

		- ON js.unset-seat
			- EMIT unset-seat

		- ON unset-seat
			- render A

		- ON discconnect
			- EMIT socket.emit('unjoin-room')

Server
	- ON connection
		- ON join-room
			- socket.join

		- EMIT get-seat

	- ON hover-seat
		- IO EMIT hover-seat

	- ON set-seat
		- update DB
		- IO EMIT set-seat

	- ON unset-seat
		- update DB
		- IO EMIT unset-seat

	- ON unjoin-room
		- update DB
			- remove seats booked by the socket

		- IO EMIT unset-seat

------

3 states are there
	- A - available
		- others can book

	- H - hover
		- others can book
		- someone else is hovering

	- B - booked
		- others can't booked, it's locked

-----

to do
	- instead of 5, have 20 seats
		- for loop for div
		- id: 'r1c1' to 'r4c5'


	- round corners for seats
	- promisify all socket events
	- if the socket disconnect
		- remove all the seats booked by it

